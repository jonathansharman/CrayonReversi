import Math;

// An instance of a game of Reversi.
class Reversi {
	field board; // The game board as a 2D array of pieces: EMPTY, BLACK, or WHITE.
	field currentPlayer = BLACK; // BLACK or WHITE.
	field passed = false; // Whether the previous move was a pass.
	field gameOver = false; // Whether the game has ended (two consecutive passes).
	field validMoves; // The list of valid moves for the current player.

	constructor() {
		this.board = [];
		for (row = 0; row < N; ++row) {
			this.board.add([]);
			for (col = 0; col < N; ++col) {
				this.board[row].add(EMPTY);
			}
		}
		this.board[N / 2 - 1][N / 2 - 1] = WHITE;
		this.board[N / 2][N / 2 - 1] = BLACK;
		this.board[N / 2 - 1][N / 2] = BLACK;
		this.board[N / 2][N / 2] = WHITE;

		this.refreshValidMoves();
	}

	// Returns a deep copy of this game state.
	function clone() {
		newReversi = new Reversi();

		newReversi.board = [];
		for (i = 0; i < this.board.length; ++i) {
			newReversi.board.add(this.board[i].clone());
		}

		newReversi.currentPlayer = this.currentPlayer;
		newReversi.passed = this.passed;
		newReversi.gameOver = this.gameOver;

		newReversi.validMoves = [];
		for (i = 0; i < this.validMoves.length; ++i) {
			newReversi.validMoves.add(this.validMoves[i].clone());
		}

		return newReversi;
	}

	// Computes whether the given move is valid for the current player.
	function isValidMove(move) {
		row = move[0];
		col = move[1];
		if (this.board[row][col] != 0) {
			return false;
		}
		deltas = [[1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [-1, 1], [1, -1], [-1, -1]];
		for (i = 0; i < deltas.length; ++i) {
			dRow = deltas[i][0];
			dCol = deltas[i][1];

			fRow = row + dRow;
			fCol = col + dCol;
			foundOther = false;
			while (fRow >= 0 && fRow < N && fCol >= 0 && fCol < N && this.board[fRow][fCol] == -this.currentPlayer) {
				foundOther = true;
				fRow += dRow;
				fCol += dCol;
			}			
			if (foundOther && fRow >= 0 && fRow < N && fCol >= 0 && fCol < N && this.board[fRow][fCol] == this.currentPlayer) {
				return true;
			}
		}
		return false;
	}

	// Refreshes the list of valid moves.
	function refreshValidMoves() {
		this.validMoves = [];
		for (row = 0; row < N; ++row) {
			for (col = 0; col < N; ++col) {
				if (this.isValidMove([row, col])) {
					this.validMoves.add([row, col]);
				}
			}
		}
	}

	// Causes the current player to attempt to play the given move. Returns this.
	function play(move) {
		row = move[0];
		col = move[1];
		if (this.isValidMove(move)) {
			deltas = [[1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [-1, 1], [1, -1], [-1, -1]];
			for (i = 0; i < deltas.length; ++i) {
				dRow = deltas[i][0];
				dCol = deltas[i][1];

				fRow = row + dRow;
				fCol = col + dCol;
				foundOther = false;
				while (fRow >= 0 && fRow < N && fCol >= 0 && fCol < N && this.board[fRow][fCol] == -this.currentPlayer) {
					foundOther = true;
					fRow += dRow;
					fCol += dCol;
				}
				if (foundOther && fRow >= 0 && fRow < N && fCol >= 0 && fCol < N && this.board[fRow][fCol] == this.currentPlayer) {
					writeRow = row + dRow;
					writeCol = col + dCol;
					while (writeRow != fRow || writeCol != fCol) {
						this.board[writeRow][writeCol] = this.currentPlayer;
						writeRow += dRow;
						writeCol += dCol;
					}
				}
			}

			this.board[row][col] = this.currentPlayer;
			this.currentPlayer = -this.currentPlayer;

			this.passed = false;

			this.refreshValidMoves();
		}
		return this;
	}

	// Causes the current player to pass, ending the game if the previous player also passed. Returns this.
	function pass() {
		this.currentPlayer = -this.currentPlayer;
		if (this.passed) {
			this.gameOver = true;
		} else {
			this.passed = true;
			this.refreshValidMoves();
		}
		return this;
	}

	// Computes the number of pieces for each player as a dictionary from player to pieces.
	function getScores() {
		score = {BLACK: 0, WHITE: 0};
		for (row = 0; row < N; ++row) {
			for (col = 0; col < N; ++col) {
				space = this.board[row][col];
				if (space != 0) {
					++score[space];
				}
			}
		}
		return score;
	}
}
