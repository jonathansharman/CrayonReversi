import Game;
import Graphics2D;
import Math;
import Random;

const FPS = 30;
const X_RES = 400;
const Y_RES = 400;

const N = 8;
const MIN_VALUE = -1000000;
const MAX_VALUE = 1000000;

const CELL_WIDTH = X_RES / N;
const CELL_HEIGHT = Y_RES / N;

const CELL_PADDING = 5;

const BUTTON_PADDING = 10;
const BUTTON_BORDER = 3;
const SELECTOR_RADIUS = 30;

const MAX_LOOKAHEAD = 4;

const EMPTY = 0;
const BLACK = 1;
const WHITE = -1;

enum GameState { SELECTOR, PLAYING }

function distanceSquared(p1, p2) {
	return (p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2;
}

function main() {
	window = new Game.GameWindow("Reversi", FPS, X_RES, Y_RES);

	gameState = GameState.SELECTOR;
	// Each player is either "human" or an integer representing an AI level.
	players = {BLACK: new Human(), WHITE: new RandomAI()};

	titleImage = Font.title.render("Reversi");
	gameOverImage = Font.white.render("Game Over");
	playButtonTextImage = Font.white.render("Play!");
	tourneyButtonTextImage = Font.white.render("Tourney");
	restartImage = Font.yellow.render("Press F2 to return to menu");

	blackPlayerImage  = Font.white.render(players[BLACK].toString());
	whitePlayerImage = Font.black.render(players[WHITE].toString());

	blackWins = 0;
	matches = 0;

	programRunning = true;
	while (programRunning) {
		eventList = window.pumpEvents();
		Input.update(eventList);
		for (i = 0; i < eventList.length; i++) {
			event = eventList[i];
			if (event.type == Game.EventType.QUIT) {
				programRunning = false;
			}
		}

		if (Input.f2) {
			// Restart game and reset stats.
			blackWins = 0;
			matches = 0;
			gameState = GameState.SELECTOR;
		}

		if (gameState == GameState.SELECTOR) {
			playButtonLeft = X_RES / 2 - playButtonTextImage.width / 2 - BUTTON_PADDING;
			playButtonTop = Y_RES / 2 - playButtonTextImage.height / 2 - BUTTON_PADDING;
			playButtonWidth = playButtonTextImage.width + 2 * BUTTON_PADDING;
			playButtonHeight = playButtonTextImage.height + 2 * BUTTON_PADDING;

			tourneyButtonLeft = X_RES / 2 - tourneyButtonTextImage.width / 2 - BUTTON_PADDING;
			tourneyButtonTop = 3 * Y_RES / 4 - tourneyButtonTextImage.height / 2 - BUTTON_PADDING;
			tourneyButtonWidth = tourneyButtonTextImage.width + 2 * BUTTON_PADDING;
			tourneyButtonHeight = tourneyButtonTextImage.height + 2 * BUTTON_PADDING;

			hoveringPlay = true;
			hoveringPlay = hoveringPlay && Input.mouse_x >= playButtonLeft;
			hoveringPlay = hoveringPlay && Input.mouse_x < playButtonLeft + playButtonTextImage.width + 2 * BUTTON_PADDING;
			hoveringPlay = hoveringPlay && Input.mouse_y >= playButtonTop;
			hoveringPlay = hoveringPlay && Input.mouse_y < playButtonTop + playButtonTextImage.height + 2 * BUTTON_PADDING;

			hoveringTourney = true;
			hoveringTourney = hoveringTourney && Input.mouse_x >= tourneyButtonLeft;
			hoveringTourney = hoveringTourney && Input.mouse_x < tourneyButtonLeft + tourneyButtonTextImage.width + 2 * BUTTON_PADDING;
			hoveringTourney = hoveringTourney && Input.mouse_y >= tourneyButtonTop;
			hoveringTourney = hoveringTourney && Input.mouse_y < tourneyButtonTop + tourneyButtonTextImage.height + 2 * BUTTON_PADDING;

			if (Input.left_click) {
				if (hoveringPlay) {
					blackScoreImage = Font.white.render(players[BLACK].toString());
					whiteScoreImage = Font.black.render(players[WHITE].toString());

					reversi = new Reversi();
					reversiRenderer = new ReversiRenderer(reversi);
					gameState = GameState.PLAYING;
					tourneyMode = false;
				} else if (hoveringTourney) {
					blackScoreImage = Font.white.render(players[BLACK].toString());
					whiteScoreImage = Font.black.render(players[WHITE].toString());

					reversi = new Reversi();
					reversiRenderer = new ReversiRenderer(reversi);
					gameState = GameState.PLAYING;
					tourneyMode = true;
				} else if (distanceSquared([Input.mouse_x, Input.mouse_y], [X_RES / 4, Y_RES / 2]) < SELECTOR_RADIUS ** 2) {
					name = players[BLACK].toString();
					if (name == "Human") {
						players[BLACK] = new RandomAI();
					} else if (name == "Bozo") {
						players[BLACK] = new NegamaxAI(0);
					} else if (players[BLACK].maxLookahead == MAX_LOOKAHEAD) {
						players[BLACK] = new Human();
					} else {
						++players[BLACK].maxLookahead;
					}
					blackPlayerImage  = Font.white.render(players[BLACK].toString());
				} else if (distanceSquared([Input.mouse_x, Input.mouse_y], [3 * X_RES / 4, Y_RES / 2]) < SELECTOR_RADIUS ** 2) {
					name = players[WHITE].toString();
					if (name == "Human") {
						players[WHITE] = new RandomAI();
					} else if (name == "Bozo") {
						players[WHITE] = new NegamaxAI(0);
					} else if (players[WHITE].maxLookahead == MAX_LOOKAHEAD) {
						players[WHITE] = new Human();
					} else {
						++players[WHITE].maxLookahead;
					}
					whitePlayerImage = Font.black.render(players[WHITE].toString());
				}
			}

			Graphics2D.Draw.fill(0, 128, 0);
			
			// Draw title.
			new Drawing().setImage(titleImage).setPos(X_RES / 2, Y_RES / 4).alignCenter().alignMiddle().draw();

			// Draw black selector.
			Graphics2D.Draw.ellipse
				( X_RES / 4 - SELECTOR_RADIUS
				, Y_RES / 2 - SELECTOR_RADIUS
				, 2 * SELECTOR_RADIUS
				, 2 * SELECTOR_RADIUS
				, 0, 0, 0
				);
			new Drawing().setImage(blackPlayerImage).setPos(X_RES / 4, Y_RES / 2).alignCenter().alignMiddle().draw();

			// Draw white selector.
			Graphics2D.Draw.ellipse
				( 3 * X_RES / 4 - SELECTOR_RADIUS
				, Y_RES / 2 - SELECTOR_RADIUS
				, 2 * SELECTOR_RADIUS
				, 2 * SELECTOR_RADIUS
				, 255, 255, 255
				);
			new Drawing().setImage(whitePlayerImage).setPos(3 * X_RES / 4, Y_RES / 2).alignCenter().alignMiddle().draw();

			// Draw play button.
			Graphics2D.Draw.rectangle
				( playButtonLeft
				, playButtonTop
				, playButtonWidth
				, playButtonHeight
				, 0, 0, 0
				);
			color = hoveringPlay ? Color.silver() : Color.gray();
			Graphics2D.Draw.rectangle
				( playButtonLeft + BUTTON_BORDER
				, playButtonTop + BUTTON_BORDER
				, playButtonWidth - 2 * BUTTON_BORDER
				, playButtonHeight - 2 * BUTTON_BORDER
				, color.r, color.g, color.b
				);
			new Drawing().setImage(playButtonTextImage).setPos(X_RES / 2, Y_RES / 2).alignCenter().alignMiddle().draw();

			// Draw tourney button.
			Graphics2D.Draw.rectangle
				( tourneyButtonLeft
				, tourneyButtonTop
				, tourneyButtonWidth
				, tourneyButtonHeight
				, 0, 0, 0
				);
			color = hoveringTourney ? Color.silver() : Color.gray();
			Graphics2D.Draw.rectangle
				( tourneyButtonLeft + BUTTON_BORDER
				, tourneyButtonTop + BUTTON_BORDER
				, tourneyButtonWidth - 2 * BUTTON_BORDER
				, tourneyButtonHeight - 2 * BUTTON_BORDER
				, color.r, color.g, color.b
				);
			new Drawing().setImage(tourneyButtonTextImage).setPos(X_RES / 2, 3 * Y_RES / 4).alignCenter().alignMiddle().draw();
		} else if (gameState == GameState.PLAYING) {
			if (reversi.gameOver) {
				scores = reversi.getScores();
				if (tourneyMode) {
					// Update standings and immediately restart.
					if (scores[BLACK] != scores[WHITE]) {
						++matches;
						if (scores[BLACK] > scores[WHITE]) {
							++blackWins;
						}
					}					

					blackScoreText = players[BLACK].toString();
					if (matches > 0) {
						blackScoreText += ": " + blackWins + "/" + matches + " (" + 100 * blackWins / matches + "%)";
					}
					blackScoreImage = Font.white.render(blackScoreText);

					whiteScoreText = players[WHITE].toString();
					if (matches > 0) {
						whiteScoreText += ": " + (matches - blackWins) + "/" + matches + " (" + 100 * (matches - blackWins) / matches + "%)";
					}
					whiteScoreImage = Font.black.render(whiteScoreText);

					reversi = new Reversi();
					reversiRenderer = new ReversiRenderer(reversi);
					gameState = GameState.PLAYING;
				} else {
					blackScoreImage = Font.white.render(players[BLACK].toString() + ": " + scores[BLACK]);
					whiteScoreImage = Font.black.render(players[WHITE].toString() + ": " + scores[WHITE]);
				}
			} else {
				players[reversi.currentPlayer].makeMove(reversi);
			}

			reversiRenderer.draw();

			if (reversi.gameOver || tourneyMode) {
				new Drawing().setImage(blackScoreImage).setPos(0, 0).setBgColor(Color.black(192)).draw();
				new Drawing().setImage(whiteScoreImage).setPos(0, blackScoreImage.height).setBgColor(Color.white(192)).draw();
				new Drawing()
					.setImage(restartImage)
					.setPos(X_RES / 2, Y_RES)
					.alignCenter()
					.alignBottom()
					.setBgColor(Color.black(192))
					.draw();
			}
		}
		window.clockTick();
	}
}
